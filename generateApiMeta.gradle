import groovy.json.JsonOutput

def baseDir = file('src/main/java/com/example/domain')
def outputFile = file('src/main/resources/api-meta.json')

task generateApiMeta {
    group = 'build setup'
    description = 'Git blame Í∏∞Î∞òÏúºÎ°ú SwaggerÏö© api-meta.json ÏÉùÏÑ±'

    outputs.file(outputFile)

    doLast {
        if (!baseDir.exists()) {
            println "‚ö†Ô∏è  baseDir Í≤ΩÎ°úÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: ${baseDir}"
            outputFile.text = "{}"
            return
        }

        def metaMap = [:]

        baseDir.eachDirRecurse { subDir ->
            if (subDir.name == "controller") {
                println "üìÇ controller ÎîîÎ†âÌÑ∞Î¶¨ ÌÉêÏÉâ Ï§ë: ${subDir}"

                subDir.eachFileRecurse { file ->
                    if (file.name.endsWith('.java')) {
                        def className = file.path
                                .replace(project.projectDir.path + "/src/main/java/", "")
                                .replace(".java", "")
                                .replace("/", ".")

                        def lines = file.readLines()
                        lines.eachWithIndex { line, i ->
                            if (line =~ /public\s+\w+\s+\w+\s*\(/) {
                                def methodName = (line =~ /public\s+\w+\s+(\w+)\s*\(/)[0][1]
                                def lineNum = i + 1
                                def blame = "git blame -L ${lineNum},+1 ${file.absolutePath}".execute().text
                                def dateMatch = (blame =~ /(\d{4}-\d{2}-\d{2})/)
                                def date = dateMatch ? dateMatch[0][1] : 'unknown'
                                def key = "${className}#${methodName}"
                                metaMap[key] = date
                            }
                        }
                    }
                }
            }
        }

        outputFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(metaMap))
        println "‚úÖ api-meta.json ÏÉùÏÑ± ÏôÑÎ£å: ${outputFile.absolutePath}"
    }
}
