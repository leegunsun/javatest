import groovy.json.JsonOutput

def baseDir = file('src/main/java/com/example/open/domain')
def outputFile = file('src/main/resources/static/swagger-status/api-meta.json')

task generateApiMeta {
    group = 'build setup'
    description = 'Git blame Í∏∞Î∞òÏúºÎ°ú SwaggerÏö© api-meta.json ÏÉùÏÑ± (ControllerÎ≥Ñ tag, method Íµ¨Ï°∞Ìôî)'

    outputs.file(outputFile)

    doLast {
        if (!baseDir.exists()) {
            println "‚ö†Ô∏è  baseDir Í≤ΩÎ°úÍ∞Ä Ï°¥Ïû¨ÌïòÏßÄ ÏïäÏäµÎãàÎã§: ${baseDir}"
            outputFile.text = "{}"
            return
        }

        def metaMap = [:]

        baseDir.eachDirRecurse { subDir ->
            if (subDir.name == "controller") {
                println "üìÇ controller ÎîîÎ†âÌÑ∞Î¶¨ ÌÉêÏÉâ Ï§ë: ${subDir}"

                subDir.eachFileRecurse { file ->
                    if (file.name.endsWith('.java')) {
                        def lines = file.readLines()
                        def className = file.absolutePath
                                .replace(project.projectDir.absolutePath + File.separator + "src${File.separator}main${File.separator}java${File.separator}", "")
                                .replaceAll("[/\\\\]", ".")
                                .replace(".java", "")

                        def controllerTagName = null
                        def controllerTagDescription = null
                        def isTagBlock = false
                        def tagBlock = ""

                        lines.each { line ->
                            if (line.contains("@Tag(")) {
                                isTagBlock = true
                            }
                            if (isTagBlock) {
                                tagBlock += line.trim()
                                // Î∏îÎ°ù ÎÅùÏùÑ ÎßåÎÇ¨ÏùÑ Îïå
                                if (line.contains(")")) {
                                    isTagBlock = false
                                    def tagMatcher = tagBlock =~ /@Tag\(\s*name\s*=\s*"([^"]+)"\s*,\s*description\s*=\s*"([^"]+)"\s*\)/
                                    if (tagMatcher.find()) {
                                        controllerTagName = tagMatcher.group(1)
                                        controllerTagDescription = tagMatcher.group(2)
                                        println "üîñ @Tag Î∞úÍ≤¨: name=${controllerTagName}, description=${controllerTagDescription}"
                                    } else {
                                        println "‚ö†Ô∏è  @Tag ÌååÏã± Ïã§Ìå®: ${tagBlock}"
                                    }
                                    tagBlock = "" // Îã§ÏùåÏùÑ ÏúÑÌï¥ Ï¥àÍ∏∞Ìôî
                                }
                            }
                        }


                        if (controllerTagName == null) {
                            println "‚ö†Ô∏è  @Tag Ï†ïÎ≥¥ ÏóÜÏùå (Í±¥ÎÑàÎúÄ): ${file.name}"
                            return
                        }

                        def methodsMap = [:]
                        def pendingOperation = false
                        def startLine = -1
                        def storedMethodName = null

                        lines.eachWithIndex { line, i ->
                            if (line.contains("@Operation")) {
                                pendingOperation = true
                                startLine = i
                            }

                            def methodMatcher = line =~ /public\s+[\w<>,\[\]\s]+\s+(\w+)\s*\(/
                            if (pendingOperation && methodMatcher) {
                                storedMethodName = methodMatcher[0][1]
                                def endLine = i + 1

                                def blame = "git blame -L ${startLine+1},${endLine} ${file.absolutePath}".execute().text
                                def dateMatch = (blame =~ /(\d{4}-\d{2}-\d{2})/)
                                def allDates = dateMatch.collect { it[1] }
                                def date = allDates ? allDates.sort().last() : 'unknown'

                                methodsMap[storedMethodName] = [ date: date ]

                                // Ï¥àÍ∏∞Ìôî
                                pendingOperation = false
                                startLine = -1
                                storedMethodName = null
                            }
                        }

                        if (!metaMap.containsKey(className)) {
                            metaMap[className] = [
                                    tag: [
                                            name: controllerTagName,
                                            description: controllerTagDescription
                                    ],
                                    methods: methodsMap
                            ]
                        }
                    }
                }
            }
        }

        outputFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(metaMap))
        println "‚úÖ api-meta.json ÏÉùÏÑ± ÏôÑÎ£å: ${outputFile.absolutePath}"
    }
}