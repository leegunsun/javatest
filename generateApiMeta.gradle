import groovy.json.JsonOutput

def baseDir = file('src/main/java/com/example/open/domain')
def outputFile = file('src/main/resources/static/swagger-status/api-meta.json')


task generateApiMeta {
    group = 'build setup'
    description = 'Git blame 기반으로 Swagger용 api-meta.json 생성'

    outputs.file(outputFile)

    doLast {
        if (!baseDir.exists()) {
            println "⚠️  baseDir 경로가 존재하지 않습니다: ${baseDir}"
            outputFile.text = "{}"
            return
        }

        def metaMap = [:]

        baseDir.eachDirRecurse { subDir ->
            if (subDir.name == "controller") {
                println "📂 controller 디렉터리 탐색 중: ${subDir}"

                subDir.eachFileRecurse { file ->
                    if (file.name.endsWith('.java')) {
                        def className = file.absolutePath
                                .replace(project.projectDir.absolutePath + File.separator + "src${File.separator}main${File.separator}java${File.separator}", "")
                                .replaceAll("[/\\\\]", ".") // 모든 OS 호환
                                .replace(".java", "")

                        def lines = file.readLines()

                        def pendingOperation = false
                        def operationSummaryLine = -1
                        def storedMethodName = null

                        def startLine = -1

                        lines.eachWithIndex { line, i ->
                            if (line.contains("@Operation")) {
                                pendingOperation = true
                                startLine = i  // @Operation 시작 줄 저장
                            }

                            if (pendingOperation && (line.contains("summary") || line.contains("description"))) {
                                operationSummaryLine = i  // summary 줄 저장
                            }

                            def methodMatcher = line =~ /public\s+[\w<>\[\],\s]+?\s+(\w+)\s*\(/
                            if (pendingOperation && methodMatcher && startLine >= 0) {
                                storedMethodName = methodMatcher[0][1]

                                def endLine = i + 1  // 0-based 인덱스 i에 +1을 해서 실제 파일의 행 번호
                                def blame = "git blame -L ${startLine+1},${endLine} ${file.absolutePath}".execute().text
//                                println "DEBUG-NEW: file=${file.name}, start=${startLine+1}, end=${endLine}"
                                def dateMatch = (blame =~ /(\d{4}-\d{2}-\d{2})/)
                                def allDates = dateMatch.collect { it[1] }
                                def date = allDates ? allDates.sort().last() : 'unknown'

                                def key = "${className}#${storedMethodName}"
                                if (!metaMap.containsKey(key)) {
                                    metaMap[key] = date
                                }

                                // 초기화
                                pendingOperation = false
                                operationSummaryLine = -1
                                startLine = -1
                                storedMethodName = null
                            }
                        }

                    }
                }
            }
        }

        outputFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(metaMap))
        println "✅ api-meta.json 생성 완료: ${outputFile.absolutePath}"
    }
}