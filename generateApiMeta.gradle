import groovy.json.JsonOutput

def baseDir = file('src/main/java/com/example/open/domain')
def outputFile = file('src/main/resources/api-meta.json')

task generateApiMeta {
    group = 'build setup'
    description = 'Git blame 기반으로 Swagger용 api-meta.json 생성'

    outputs.file(outputFile)

    doLast {
        if (!baseDir.exists()) {
            println "⚠️  baseDir 경로가 존재하지 않습니다: ${baseDir}"
            outputFile.text = "{}"
            return
        }

        def metaMap = [:]

        baseDir.eachDirRecurse { subDir ->
            if (subDir.name == "controller") {
                println "📂 controller 디렉터리 탐색 중: ${subDir}"

                subDir.eachFileRecurse { file ->
                    if (file.name.endsWith('.java')) {
                        def className = file.absolutePath
                                .replace(project.projectDir.absolutePath + File.separator + "src${File.separator}main${File.separator}java${File.separator}", "")
                                .replaceAll("[/\\\\]", ".") // 모든 OS 호환
                                .replace(".java", "")

                        def lines = file.readLines()

                        def isInOperationBlock = false
                        def operationStartLine = -1
                        def methodName = null

                        lines.eachWithIndex { line, i ->

                            // 메서드 이름 추출
                            if (line =~ /public\s+\w+\s+(\w+)\s*\(/) {
                                methodName = (line =~ /public\s+\w+\s+(\w+)\s*\(/)[0][1]
                            }

                            // 어노테이션 블록 시작
                            if (line.trim().startsWith("@Operation")) {
                                isInOperationBlock = true
                                operationStartLine = i
                            }

                            // 어노테이션 블럭 내에서 summary 또는 description 찾기
                            if (isInOperationBlock && (line.contains("summary") || line.contains("description"))) {
                                def blame = "git blame -L ${i + 1},+1 ${file.absolutePath}".execute().text
                                def dateMatch = (blame =~ /(\d{4}-\d{2}-\d{2})/)
                                def date = dateMatch ? dateMatch[0][1] : 'unknown'

                                def key = "${className}#${methodName}"
                                if (!metaMap.containsKey(key)) {
                                    metaMap[key] = date
                                }
                            }

                            // 어노테이션 블럭 끝 추정 (닫는 괄호)
                            if (isInOperationBlock && line.trim().startsWith(")")) {
                                isInOperationBlock = false
                            }
                        }
                    }
                }
            }
        }

        outputFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(metaMap))
        println "✅ api-meta.json 생성 완료: ${outputFile.absolutePath}"
    }
}
